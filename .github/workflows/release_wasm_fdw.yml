name: Release


on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Push events to matching wasm fdw tag, i.e. v1.0.2

permissions:
  contents: write

jobs:
  release:
    name: Create Wasm FDW Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          # install Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path --profile minimal --default-toolchain 1.85.0 && \
            rustup --version && \
            rustc --version && \
            cargo --version

          # add wasm32-unknown-unknown target
          rustup target add wasm32-unknown-unknown

          # install cargo binstall
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

          # install Wasm component using binstall (speedup)
          cargo binstall cargo-component --version 0.21.1

          # install rustfmt for the toolchain
          rustup component add rustfmt

          # show all installed packagies
          cargo install --list

      - name: Build Wasm FDW
        run: |
          cargo component build --release --target wasm32-unknown-unknown

      - name: Calculate Wasm file checksum
        uses: jmgilman/actions-generate-checksum@v1
        with:
          method: sha256
          output: checksum.txt
          patterns: |
            ./target/wasm32-unknown-unknown/release/*.wasm

      - name: Get project metadata JSON
        id: metadata
        run: |
          METADATA_JSON=`cargo metadata --format-version 1 --no-deps --offline`
          echo "METADATA_JSON=$METADATA_JSON" >> "$GITHUB_OUTPUT"

      - name: Extract package info
        id: extract
        env:
          TAG: ${{ github.ref_name }}
        run: |
          PROJECT="${{ fromJson(steps.metadata.outputs.METADATA_JSON).packages[0].name }}"
          PACKAGE="${{ fromJson(steps.metadata.outputs.METADATA_JSON).packages[0].metadata.component.package }}"
          VERSION=`echo "${TAG}" | sed -E 's/v(.*)/\1/'`
          CHECKSUM=`head -1 checksum.txt | sed -E 's/^(.*) .*/\1/'`
          echo "PROJECT=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "PACKAGE=$PACKAGE" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "CHECKSUM=$CHECKSUM" >> "$GITHUB_OUTPUT"

      - name: Create README.txt
        env:
          PROJECT: ${{ steps.extract.outputs.PROJECT }}
          PACKAGE: ${{ steps.extract.outputs.PACKAGE }}
          VERSION: ${{ steps.extract.outputs.VERSION }}
          CHECKSUM: ${{ steps.extract.outputs.CHECKSUM }}
        run: |
          cat > README.txt <<EOF
          To use this Wasm foreign data wrapper on Supabase follow the steps in https://github.com/${GITHUB_REPOSITORY}.

          The specific options for this version of the gravatar_server are:

          create server gravatar_server
            foreign data wrapper wasm_wrapper
            options (
              fdw_package_url 'https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/${PROJECT}.wasm',
              fdw_package_name '${PACKAGE}',
              fdw_package_version '${VERSION}',
              fdw_package_checksum '${CHECKSUM}',
              api_key 'your-secret-api-key-here' -- For production use 'api_key_id' instead with Vault.
            );

          For more details, please visit https://fdw.dev.
          EOF

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          make_latest: true
          files: |
            README.txt
            checksum.txt
            ./target/wasm32-unknown-unknown/release/*.wasm

